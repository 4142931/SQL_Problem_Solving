#programmers_LEVEL 3

-- 물고기 종류 별 대어 찾기
SELECT F.ID
       ,FN.FISH_NAME
       ,F.LENGTH
FROM FISH_INFO AS F
     JOIN FISH_NAME_INFO AS FN ON F.FISH_TYPE = FN.FISH_TYPE
WHERE (FISH_NAME, LENGTH) IN 
    (SELECT FN.FISH_NAME, MAX(LENGTH)
     FROM FISH_INFO AS F
     JOIN FISH_NAME_INFO AS FN ON F.FISH_TYPE = FN.FISH_TYPE
     GROUP BY FN.FISH_NAME)
ORDER BY F.ID ASC;


-- 업그레이드 할 수 없는 아이템 구하기
SELECT I.ITEM_ID
        ,I.ITEM_NAME
        ,I.RARITY
FROM ITEM_INFO AS I 
LEFT JOIN ITEM_TREE AS T ON I.ITEM_ID = T.PARENT_ITEM_ID 
WHERE T.PARENT_ITEM_ID IS NULL
ORDER BY I.ITEM_ID DESC;

-- 특정 조건을 만족하는 물고기별 수와 최대 길이 구하기
SELECT 
      COUNT(*) AS FISH_COUNT
      ,MAX(LENGTH) AS MAX_LENGTH
      ,FISH_TYPE 
FROM FISH_INFO
GROUP BY FISH_TYPE
HAVING AVG (CASE 
            WHEN LENGTH = LENGTH THEN LENGTH
            WHEN LENGTH IS NULL THEN 10
       END) >= 33     
ORDER BY FISH_TYPE ASC;

-- 자동차 대여 기록에서 대여중 / 대여 가능 여부 구분하기
SELECT CAR_ID,
       MAX(CASE
            WHEN '2022-10-16' BETWEEN START_DATE AND END_DATE THEN '대여중'
            ELSE '대여 가능'
       END) AS AVAILABILITY
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
GROUP BY CAR_ID
ORDER BY CAR_ID DESC;

-- 없어진 기록 찾기
SELECT O.ANIMAL_ID
        ,O.NAME
FROM ANIMAL_OUTS AS O
LEFT JOIN ANIMAL_INS AS I ON O.ANIMAL_ID = I.ANIMAL_ID
WHERE I.ANIMAL_ID IS NULL
ORDER BY O.ANIMAL_ID ASC
        ,O.NAME  ASC;
        
-- 부서별 평균 연봉 조회하기
SELECT  D.DEPT_ID
        ,D.DEPT_NAME_EN
        ,ROUND(AVG(E.SAL), 0) AS AVG_SAL
FROM HR_DEPARTMENT AS D
INNER JOIN HR_EMPLOYEES AS E ON D.DEPT_ID = E.DEPT_ID
GROUP BY D.DEPT_ID, D.DEPT_NAME_EN
ORDER BY AVG_SAL DESC;

-- 즐겨찾기가 가장 많은 식당 정보 출력하기
 SELECT FOOD_TYPE
        ,REST_ID
        ,REST_NAME
        ,FAVORITES
FROM REST_INFO
WHERE (FOOD_TYPE, FAVORITES) IN
            (SELECT FOOD_TYPE
                    ,MAX(FAVORITES) 
            FROM REST_INFO 
            GROUP BY FOOD_TYPE)
ORDER BY FOOD_TYPE DESC;

-- 있었는데요 없었습니다
SELECT I.ANIMAL_ID
        ,I.NAME
FROM ANIMAL_INS AS I
JOIN ANIMAL_OUTS AS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE I.DATETIME >= O.DATETIME
ORDER BY I.DATETIME;

-- 조건에 맞는 사용자와 총 거래금액 조회하기
SELECT WRITER_ID
       ,NICKNAME
       ,SUM(PRICE) AS TOTAL_SALES
FROM USED_GOODS_BOARD AS B 
JOIN USED_GOODS_USER AS U ON B.WRITER_ID = U.USER_ID
WHERE B.STATUS = 'DONE'
GROUP BY WRITER_ID, NICKNAME
HAVING TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES ASC;

-- 오랜 기간 보호한 동물(1)
SELECT I.NAME
        ,I.DATETIME
FROM ANIMAL_INS AS I
LEFT JOIN ANIMAL_OUTS AS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE O.ANIMAL_ID IS NULL
ORDER BY I.DATETIME ASC
LIMIT 3;

-- 카테고리 별 도서 판매량 집계하기
SELECT CATEGORY
        ,SUM(SALES) AS TOTAL_SALES
FROM BOOK AS B
JOIN BOOK_SALES AS S ON B.BOOK_ID = S.BOOK_ID
WHERE sales_date BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59'
GROUP BY CATEGORY 
ORDER BY CATEGORY ASC

