#programmers_LEVEL 2

-- 연도별 대장균 크기의 편차 구하기 
SELECT YEAR(DIFFERENTIATION_DATE) AS YEAR,
       MAX(SIZE_OF_COLONY) OVER(PARTITION BY YEAR(DIFFERENTIATION_DATE)) - SIZE_OF_COLONY AS YEAR_DEV ,
       ID
FROM ECOLI_DATA  
ORDER BY YEAR, YEAR_DEV;

-- 업그레이드 된 아이템 구하기
SELECT I.ITEM_ID, I.ITEM_NAME, I.RARITY
FROM ITEM_INFO AS I
JOIN ITEM_TREE AS T ON I.ITEM_ID = T.ITEM_ID
WHERE T.PARENT_ITEM_ID IN (
                            SELECT ITEM_ID
                            FROM ITEM_INFO
                            WHERE RARITY = 'RARE'
                            )
ORDER BY      I.ITEM_ID DESC;

-- 노선별 평균 역 사이 거리 조회하기
SELECT ROUTE
        ,CONCAT(ROUND(SUM(D_BETWEEN_DIST), 1), 'km')  AS TOTAL_DISTANCE
        ,CONCAT(ROUND(AVG(D_BETWEEN_DIST), 2), 'km')  AS AVERAGE_DISTANCE
FROM SUBWAY_DISTANCE 
GROUP BY ROUTE
ORDER BY SUM(D_BETWEEN_DIST) DESC;

-- 재구매가 일어난 상품과 회원 리스트 구하기
WITH TEST AS
(SELECT USER_ID
     , PRODUCT_ID
     , COUNT(*) AS CNT
FROM ONLINE_SALE 
GROUP BY USER_ID, PRODUCT_ID
HAVING CNT >= 2
)

SELECT USER_ID, PRODUCT_ID
FROM TEST 
ORDER BY USER_ID ASC, PRODUCT_ID DESC;

-- 조건에 맞는 사원 정보 조회하기
SELECT SUM(G.SCORE) AS SCORE
    ,E.EMP_NO 
    ,E.EMP_NAME
    ,E.POSITION
    ,E.EMAIL
FROM HR_EMPLOYEES AS E
JOIN HR_GRADE AS G ON E.EMP_NO = G.EMP_NO
GROUP BY E.EMP_NO
ORDER BY SCORE DESC
LIMIT 1;

-- 특정 물고기를 잡은 총 수 구하기
SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO AS I
JOIN FISH_NAME_INFO AS N ON I.FISH_TYPE = N.FISH_TYPE
WHERE N.FISH_NAME IN ('BASS', 'SNAPPER');

-- ROOT 아이템 구하기
SELECT I.ITEM_ID
        ,I.ITEM_NAME
FROM ITEM_INFO AS I
JOIN ITEM_TREE AS T ON I.ITEM_ID = T.ITEM_ID 
WHERE T.PARENT_ITEM_ID IS NULL 
ORDER BY I.ITEM_ID ASC;

-- 월별 잡은 물고기 수 구하기

SELECT  COUNT(*) AS FISH_COUNT
        ,MONTH(TIME) AS MONTH
FROM FISH_INFO
GROUP BY MONTH
ORDER BY MONTH ASC;

-- 가격대 별 상품 개수 구하기
SELECT TRUNCATE(PRICE, -4) AS PRICE_GROUP
      ,COUNT(DISTINCT PRODUCT_ID) AS PRODUCTS
FROM PRODUCT 
GROUP BY PRICE_GROUP
ORDER BY PRICE_GROUP ASC;

-- 물고기 종류 별 잡은 수 구하기
SELECT COUNT(*) AS FISH_COUNT
     ,N.FISH_NAME
FROM FISH_INFO AS I
JOIN FISH_NAME_INFO AS N ON N.FISH_TYPE = I.FISH_TYPE
GROUP BY N.FISH_NAME
ORDER BY FISH_COUNT DESC;

-- 3월에 태어난 여성 회원 목록 출력하기
SELECT MEMBER_ID
        ,MEMBER_NAME
        ,GENDER
        ,DATE_FORMAT(DATE_OF_BIRTH, '%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE 
WHERE MONTH(DATE_OF_BIRTH) = 3
  AND GENDER = 'W'
  AND TLNO IS NOT NULL
ORDER BY MEMBER_ID ASC;

-- 상품 별 오프라인 매출 구하기
SELECT P.product_code
        ,SUM(S.SALES_AMOUNT * P.PRICE) AS SALES
FROM PRODUCT AS P
JOIN OFFLINE_SALE AS S ON P.PRODUCT_ID = S.PRODUCT_ID
GROUP BY P.product_code
ORDER BY SALES DESC, product_code ASC;

-- 조건에 맞는 도서와 저자 리스트 출력하기
SELECT B.BOOK_ID
        ,A.AUTHOR_NAME
        ,DATE_FORMAT(B.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATEORDER
FROM BOOK AS B
JOIN AUTHOR AS A ON B.AUTHOR_ID = A.AUTHOR_ID
WHERE category = '경제' 
ORDER BY PUBLISHED_DATE ASC;

-- 성분으로 구분한 아이스크림 총 주문량
SELECT I.INGREDIENT_TYPE 
        ,SUM(TOTAL_ORDER) AS TOTAL_ORDER 
FROM FIRST_HALF AS F
JOIN ICECREAM_INFO AS I ON F.FLAVOR = I.FLAVOR
GROUP BY INGREDIENT_TYPE
ORDER BY TOTAL_ORDER ASC;

-- 고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE
        ,COUNT(ANIMAL_TYPE) AS count
FROM ANIMAL_INS 
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE ASC;

-- 입양 시각 구하기(1)
SELECT HOUR(DATETIME) AS HOUR 
        ,COUNT(ANIMAL_ID)
FROM ANIMAL_OUTS 
GROUP BY HOUR
HAVING HOUR BETWEEN 9 AND 19
ORDER BY HOUR ASC;

-- 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기
SELECT CAR_TYPE
        ,COUNT(*) AS CARS
FROM CAR_RENTAL_COMPANY_CAR 
WHERE options LIKE '%통풍시트%'
   OR options LIKE '%열선시트%'
   OR options LIKE '%가죽시트%'
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE ASC;

-- 진료과별 총 예약 횟수 출력하기
SELECT MCDP_CD AS '진료과 코드'
        ,COUNT(DISTINCT PT_NO) AS '5월예약건수'
FROM APPOINTMENT 
WHERE APNT_YMD BETWEEN '2022-05-01' AND '2022-05-31'
GROUP BY MCDP_CD
ORDER BY 5월예약건수 ASC, '진료과 코드' ASC;

-- 최솟값 구하기
SELECT MIN(DATETIME)
FROM ANIMAL_INS;

-- 동명 동물 수 찾기
SELECT NAME
        ,COUNT(NAME) AS COUNT
FROM ANIMAL_INS 
GROUP BY NAME
HAVING COUNT(NAME) >= 2
ORDER BY NAME ASC;

-- NULL 처리하기
SELECT ANIMAL_TYPE
        ,CASE WHEN NAME = NAME THEN NAME
              WHEN NAME IS NULL THEN 'No name'
         END AS NAME
        ,SEX_UPON_INTAKE
FROM ANIMAL_INS; 

-- 조건에 맞는 아이템들의 가격의 총합 구하기
SELECT SUM(PRICE) AS TOTAL_PRICE
FROM ITEM_INFO 
WHERE RARITY = 'LEGEND';

-- 중복 제거하기
SELECT COUNT(DISTINCT NAME)
FROM ANIMAL_INS;

-- 동물 수 구하기
SELECT COUNT(DISTINCT ANIMAL_ID)
FROM ANIMAL_INS ;

-- 가격이 제일 비싼 식품의 정보 출력하기
SELECT *
FROM FOOD_PRODUCT 
WHERE PRICE = (SELECT MAX(PRICE)
               FROM FOOD_PRODUCT );